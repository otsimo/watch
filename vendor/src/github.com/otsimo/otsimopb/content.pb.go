// Code generated by protoc-gen-gogo.
// source: content.proto
// DO NOT EDIT!

package otsimopb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type ContentListRequest_ListStatus int32

const (
	ContentListRequest_BOTH          ContentListRequest_ListStatus = 0
	ContentListRequest_ONLY_DRAFT    ContentListRequest_ListStatus = 1
	ContentListRequest_ONLY_APPROVED ContentListRequest_ListStatus = 2
)

var ContentListRequest_ListStatus_name = map[int32]string{
	0: "BOTH",
	1: "ONLY_DRAFT",
	2: "ONLY_APPROVED",
}
var ContentListRequest_ListStatus_value = map[string]int32{
	"BOTH":          0,
	"ONLY_DRAFT":    1,
	"ONLY_APPROVED": 2,
}

func (x ContentListRequest_ListStatus) String() string {
	return proto.EnumName(ContentListRequest_ListStatus_name, int32(x))
}
func (ContentListRequest_ListStatus) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorContent, []int{1, 0}
}

type ContentListRequest_SortBy int32

const (
	ContentListRequest_WEIGHT ContentListRequest_SortBy = 0
	ContentListRequest_TIME   ContentListRequest_SortBy = 1
)

var ContentListRequest_SortBy_name = map[int32]string{
	0: "WEIGHT",
	1: "TIME",
}
var ContentListRequest_SortBy_value = map[string]int32{
	"WEIGHT": 0,
	"TIME":   1,
}

func (x ContentListRequest_SortBy) String() string {
	return proto.EnumName(ContentListRequest_SortBy_name, int32(x))
}
func (ContentListRequest_SortBy) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorContent, []int{1, 1}
}

type ContentListRequest_SortOrder int32

const (
	ContentListRequest_DSC ContentListRequest_SortOrder = 0
	ContentListRequest_ASC ContentListRequest_SortOrder = 1
)

var ContentListRequest_SortOrder_name = map[int32]string{
	0: "DSC",
	1: "ASC",
}
var ContentListRequest_SortOrder_value = map[string]int32{
	"DSC": 0,
	"ASC": 1,
}

func (x ContentListRequest_SortOrder) String() string {
	return proto.EnumName(ContentListRequest_SortOrder_name, int32(x))
}
func (ContentListRequest_SortOrder) EnumDescriptor() ([]byte, []int) {
	return fileDescriptorContent, []int{1, 2}
}

type Content struct {
	Slug           string   `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
	Title          string   `protobuf:"bytes,2,opt,name=title,proto3" json:"title,omitempty"`
	Language       string   `protobuf:"bytes,3,opt,name=language,proto3" json:"language,omitempty"`
	Date           int64    `protobuf:"varint,4,opt,name=date,proto3" json:"date,omitempty"`
	Draft          bool     `protobuf:"varint,5,opt,name=draft,proto3" json:"draft,omitempty"`
	WrittenAt      string   `protobuf:"bytes,6,opt,name=written_at,json=writtenAt,proto3" json:"written_at,omitempty"`
	Author         string   `protobuf:"bytes,7,opt,name=author,proto3" json:"author,omitempty"`
	Category       string   `protobuf:"bytes,8,opt,name=category,proto3" json:"category,omitempty"`
	Url            string   `protobuf:"bytes,9,opt,name=url,proto3" json:"url,omitempty"`
	Weight         int32    `protobuf:"varint,10,opt,name=weight,proto3" json:"weight,omitempty"`
	Keywords       []string `protobuf:"bytes,11,rep,name=keywords" json:"keywords,omitempty"`
	CategoryWeight int32    `protobuf:"varint,12,opt,name=category_weight,json=categoryWeight,proto3" json:"category_weight,omitempty"`
	Markdown       []byte   `protobuf:"bytes,13,opt,name=markdown,proto3" json:"markdown,omitempty"`
}

func (m *Content) Reset()                    { *m = Content{} }
func (m *Content) String() string            { return proto.CompactTextString(m) }
func (*Content) ProtoMessage()               {}
func (*Content) Descriptor() ([]byte, []int) { return fileDescriptorContent, []int{0} }

type ContentListRequest struct {
	Status           ContentListRequest_ListStatus `protobuf:"varint,1,opt,name=status,proto3,enum=apipb.ContentListRequest_ListStatus" json:"status,omitempty"`
	Limit            int32                         `protobuf:"varint,2,opt,name=limit,proto3" json:"limit,omitempty"`
	Category         string                        `protobuf:"bytes,3,opt,name=category,proto3" json:"category,omitempty"`
	Offset           int32                         `protobuf:"varint,4,opt,name=offset,proto3" json:"offset,omitempty"`
	Language         string                        `protobuf:"bytes,5,opt,name=language,proto3" json:"language,omitempty"`
	OnlyHtmlUrl      bool                          `protobuf:"varint,6,opt,name=only_html_url,json=onlyHtmlUrl,proto3" json:"only_html_url,omitempty"`
	Sort             ContentListRequest_SortBy     `protobuf:"varint,7,opt,name=sort,proto3,enum=apipb.ContentListRequest_SortBy" json:"sort,omitempty"`
	Order            ContentListRequest_SortOrder  `protobuf:"varint,8,opt,name=order,proto3,enum=apipb.ContentListRequest_SortOrder" json:"order,omitempty"`
	ProfileId        string                        `protobuf:"bytes,10,opt,name=profile_id,json=profileId,proto3" json:"profile_id,omitempty"`
	ClientVersion    string                        `protobuf:"bytes,11,opt,name=client_version,json=clientVersion,proto3" json:"client_version,omitempty"`
	Categories       []string                      `protobuf:"bytes,12,rep,name=categories" json:"categories,omitempty"`
	ExceptCategories []string                      `protobuf:"bytes,13,rep,name=except_categories,json=exceptCategories" json:"except_categories,omitempty"`
}

func (m *ContentListRequest) Reset()                    { *m = ContentListRequest{} }
func (m *ContentListRequest) String() string            { return proto.CompactTextString(m) }
func (*ContentListRequest) ProtoMessage()               {}
func (*ContentListRequest) Descriptor() ([]byte, []int) { return fileDescriptorContent, []int{1} }

type ContentListResponse struct {
	Contents     []*Content `protobuf:"bytes,1,rep,name=contents" json:"contents,omitempty"`
	AssetVersion int32      `protobuf:"varint,2,opt,name=asset_version,json=assetVersion,proto3" json:"asset_version,omitempty"`
}

func (m *ContentListResponse) Reset()                    { *m = ContentListResponse{} }
func (m *ContentListResponse) String() string            { return proto.CompactTextString(m) }
func (*ContentListResponse) ProtoMessage()               {}
func (*ContentListResponse) Descriptor() ([]byte, []int) { return fileDescriptorContent, []int{2} }

type ContentGetRequest struct {
	Slug string `protobuf:"bytes,1,opt,name=slug,proto3" json:"slug,omitempty"`
}

func (m *ContentGetRequest) Reset()                    { *m = ContentGetRequest{} }
func (m *ContentGetRequest) String() string            { return proto.CompactTextString(m) }
func (*ContentGetRequest) ProtoMessage()               {}
func (*ContentGetRequest) Descriptor() ([]byte, []int) { return fileDescriptorContent, []int{3} }

func init() {
	proto.RegisterType((*Content)(nil), "apipb.Content")
	proto.RegisterType((*ContentListRequest)(nil), "apipb.ContentListRequest")
	proto.RegisterType((*ContentListResponse)(nil), "apipb.ContentListResponse")
	proto.RegisterType((*ContentGetRequest)(nil), "apipb.ContentGetRequest")
	proto.RegisterEnum("apipb.ContentListRequest_ListStatus", ContentListRequest_ListStatus_name, ContentListRequest_ListStatus_value)
	proto.RegisterEnum("apipb.ContentListRequest_SortBy", ContentListRequest_SortBy_name, ContentListRequest_SortBy_value)
	proto.RegisterEnum("apipb.ContentListRequest_SortOrder", ContentListRequest_SortOrder_name, ContentListRequest_SortOrder_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion2

// Client API for ContentService service

type ContentServiceClient interface {
	List(ctx context.Context, in *ContentListRequest, opts ...grpc.CallOption) (*ContentListResponse, error)
	Get(ctx context.Context, in *ContentGetRequest, opts ...grpc.CallOption) (*Content, error)
}

type contentServiceClient struct {
	cc *grpc.ClientConn
}

func NewContentServiceClient(cc *grpc.ClientConn) ContentServiceClient {
	return &contentServiceClient{cc}
}

func (c *contentServiceClient) List(ctx context.Context, in *ContentListRequest, opts ...grpc.CallOption) (*ContentListResponse, error) {
	out := new(ContentListResponse)
	err := grpc.Invoke(ctx, "/apipb.ContentService/List", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *contentServiceClient) Get(ctx context.Context, in *ContentGetRequest, opts ...grpc.CallOption) (*Content, error) {
	out := new(Content)
	err := grpc.Invoke(ctx, "/apipb.ContentService/Get", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ContentService service

type ContentServiceServer interface {
	List(context.Context, *ContentListRequest) (*ContentListResponse, error)
	Get(context.Context, *ContentGetRequest) (*Content, error)
}

func RegisterContentServiceServer(s *grpc.Server, srv ContentServiceServer) {
	s.RegisterService(&_ContentService_serviceDesc, srv)
}

func _ContentService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.ContentService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).List(ctx, req.(*ContentListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ContentService_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ContentGetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ContentServiceServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apipb.ContentService/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ContentServiceServer).Get(ctx, req.(*ContentGetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _ContentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "apipb.ContentService",
	HandlerType: (*ContentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "List",
			Handler:    _ContentService_List_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _ContentService_Get_Handler,
		},
	},
	Streams: []grpc.StreamDesc{},
}

func (m *Content) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Content) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Slug) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintContent(data, i, uint64(len(m.Slug)))
		i += copy(data[i:], m.Slug)
	}
	if len(m.Title) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintContent(data, i, uint64(len(m.Title)))
		i += copy(data[i:], m.Title)
	}
	if len(m.Language) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintContent(data, i, uint64(len(m.Language)))
		i += copy(data[i:], m.Language)
	}
	if m.Date != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintContent(data, i, uint64(m.Date))
	}
	if m.Draft {
		data[i] = 0x28
		i++
		if m.Draft {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if len(m.WrittenAt) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintContent(data, i, uint64(len(m.WrittenAt)))
		i += copy(data[i:], m.WrittenAt)
	}
	if len(m.Author) > 0 {
		data[i] = 0x3a
		i++
		i = encodeVarintContent(data, i, uint64(len(m.Author)))
		i += copy(data[i:], m.Author)
	}
	if len(m.Category) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintContent(data, i, uint64(len(m.Category)))
		i += copy(data[i:], m.Category)
	}
	if len(m.Url) > 0 {
		data[i] = 0x4a
		i++
		i = encodeVarintContent(data, i, uint64(len(m.Url)))
		i += copy(data[i:], m.Url)
	}
	if m.Weight != 0 {
		data[i] = 0x50
		i++
		i = encodeVarintContent(data, i, uint64(m.Weight))
	}
	if len(m.Keywords) > 0 {
		for _, s := range m.Keywords {
			data[i] = 0x5a
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if m.CategoryWeight != 0 {
		data[i] = 0x60
		i++
		i = encodeVarintContent(data, i, uint64(m.CategoryWeight))
	}
	if len(m.Markdown) > 0 {
		data[i] = 0x6a
		i++
		i = encodeVarintContent(data, i, uint64(len(m.Markdown)))
		i += copy(data[i:], m.Markdown)
	}
	return i, nil
}

func (m *ContentListRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ContentListRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if m.Status != 0 {
		data[i] = 0x8
		i++
		i = encodeVarintContent(data, i, uint64(m.Status))
	}
	if m.Limit != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintContent(data, i, uint64(m.Limit))
	}
	if len(m.Category) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintContent(data, i, uint64(len(m.Category)))
		i += copy(data[i:], m.Category)
	}
	if m.Offset != 0 {
		data[i] = 0x20
		i++
		i = encodeVarintContent(data, i, uint64(m.Offset))
	}
	if len(m.Language) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintContent(data, i, uint64(len(m.Language)))
		i += copy(data[i:], m.Language)
	}
	if m.OnlyHtmlUrl {
		data[i] = 0x30
		i++
		if m.OnlyHtmlUrl {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.Sort != 0 {
		data[i] = 0x38
		i++
		i = encodeVarintContent(data, i, uint64(m.Sort))
	}
	if m.Order != 0 {
		data[i] = 0x40
		i++
		i = encodeVarintContent(data, i, uint64(m.Order))
	}
	if len(m.ProfileId) > 0 {
		data[i] = 0x52
		i++
		i = encodeVarintContent(data, i, uint64(len(m.ProfileId)))
		i += copy(data[i:], m.ProfileId)
	}
	if len(m.ClientVersion) > 0 {
		data[i] = 0x5a
		i++
		i = encodeVarintContent(data, i, uint64(len(m.ClientVersion)))
		i += copy(data[i:], m.ClientVersion)
	}
	if len(m.Categories) > 0 {
		for _, s := range m.Categories {
			data[i] = 0x62
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if len(m.ExceptCategories) > 0 {
		for _, s := range m.ExceptCategories {
			data[i] = 0x6a
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	return i, nil
}

func (m *ContentListResponse) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ContentListResponse) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Contents) > 0 {
		for _, msg := range m.Contents {
			data[i] = 0xa
			i++
			i = encodeVarintContent(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.AssetVersion != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintContent(data, i, uint64(m.AssetVersion))
	}
	return i, nil
}

func (m *ContentGetRequest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ContentGetRequest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Slug) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintContent(data, i, uint64(len(m.Slug)))
		i += copy(data[i:], m.Slug)
	}
	return i, nil
}

func encodeFixed64Content(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Content(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintContent(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Content) Size() (n int) {
	var l int
	_ = l
	l = len(m.Slug)
	if l > 0 {
		n += 1 + l + sovContent(uint64(l))
	}
	l = len(m.Title)
	if l > 0 {
		n += 1 + l + sovContent(uint64(l))
	}
	l = len(m.Language)
	if l > 0 {
		n += 1 + l + sovContent(uint64(l))
	}
	if m.Date != 0 {
		n += 1 + sovContent(uint64(m.Date))
	}
	if m.Draft {
		n += 2
	}
	l = len(m.WrittenAt)
	if l > 0 {
		n += 1 + l + sovContent(uint64(l))
	}
	l = len(m.Author)
	if l > 0 {
		n += 1 + l + sovContent(uint64(l))
	}
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovContent(uint64(l))
	}
	l = len(m.Url)
	if l > 0 {
		n += 1 + l + sovContent(uint64(l))
	}
	if m.Weight != 0 {
		n += 1 + sovContent(uint64(m.Weight))
	}
	if len(m.Keywords) > 0 {
		for _, s := range m.Keywords {
			l = len(s)
			n += 1 + l + sovContent(uint64(l))
		}
	}
	if m.CategoryWeight != 0 {
		n += 1 + sovContent(uint64(m.CategoryWeight))
	}
	l = len(m.Markdown)
	if l > 0 {
		n += 1 + l + sovContent(uint64(l))
	}
	return n
}

func (m *ContentListRequest) Size() (n int) {
	var l int
	_ = l
	if m.Status != 0 {
		n += 1 + sovContent(uint64(m.Status))
	}
	if m.Limit != 0 {
		n += 1 + sovContent(uint64(m.Limit))
	}
	l = len(m.Category)
	if l > 0 {
		n += 1 + l + sovContent(uint64(l))
	}
	if m.Offset != 0 {
		n += 1 + sovContent(uint64(m.Offset))
	}
	l = len(m.Language)
	if l > 0 {
		n += 1 + l + sovContent(uint64(l))
	}
	if m.OnlyHtmlUrl {
		n += 2
	}
	if m.Sort != 0 {
		n += 1 + sovContent(uint64(m.Sort))
	}
	if m.Order != 0 {
		n += 1 + sovContent(uint64(m.Order))
	}
	l = len(m.ProfileId)
	if l > 0 {
		n += 1 + l + sovContent(uint64(l))
	}
	l = len(m.ClientVersion)
	if l > 0 {
		n += 1 + l + sovContent(uint64(l))
	}
	if len(m.Categories) > 0 {
		for _, s := range m.Categories {
			l = len(s)
			n += 1 + l + sovContent(uint64(l))
		}
	}
	if len(m.ExceptCategories) > 0 {
		for _, s := range m.ExceptCategories {
			l = len(s)
			n += 1 + l + sovContent(uint64(l))
		}
	}
	return n
}

func (m *ContentListResponse) Size() (n int) {
	var l int
	_ = l
	if len(m.Contents) > 0 {
		for _, e := range m.Contents {
			l = e.Size()
			n += 1 + l + sovContent(uint64(l))
		}
	}
	if m.AssetVersion != 0 {
		n += 1 + sovContent(uint64(m.AssetVersion))
	}
	return n
}

func (m *ContentGetRequest) Size() (n int) {
	var l int
	_ = l
	l = len(m.Slug)
	if l > 0 {
		n += 1 + l + sovContent(uint64(l))
	}
	return n
}

func sovContent(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozContent(x uint64) (n int) {
	return sovContent(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Content) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Content: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Content: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Title", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Title = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Date", wireType)
			}
			m.Date = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Date |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Draft", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Draft = bool(v != 0)
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field WrittenAt", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.WrittenAt = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Author", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Author = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Url", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Url = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Weight", wireType)
			}
			m.Weight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Weight |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keywords", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keywords = append(m.Keywords, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CategoryWeight", wireType)
			}
			m.CategoryWeight = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CategoryWeight |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Markdown", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Markdown = append(m.Markdown[:0], data[iNdEx:postIndex]...)
			if m.Markdown == nil {
				m.Markdown = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContent(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContentListRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContentListRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContentListRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Status", wireType)
			}
			m.Status = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Status |= (ContentListRequest_ListStatus(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Limit", wireType)
			}
			m.Limit = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Limit |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Category", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Category = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Offset", wireType)
			}
			m.Offset = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Offset |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field OnlyHtmlUrl", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.OnlyHtmlUrl = bool(v != 0)
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sort", wireType)
			}
			m.Sort = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Sort |= (ContentListRequest_SortBy(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Order", wireType)
			}
			m.Order = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Order |= (ContentListRequest_SortOrder(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProfileId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProfileId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ClientVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ClientVersion = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Categories", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Categories = append(m.Categories, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExceptCategories", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ExceptCategories = append(m.ExceptCategories, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContent(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContentListResponse) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContentListResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContentListResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Contents", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Contents = append(m.Contents, &Content{})
			if err := m.Contents[len(m.Contents)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AssetVersion", wireType)
			}
			m.AssetVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.AssetVersion |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipContent(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ContentGetRequest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowContent
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ContentGetRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ContentGetRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Slug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowContent
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthContent
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Slug = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipContent(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthContent
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipContent(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowContent
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowContent
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthContent
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowContent
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipContent(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthContent = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowContent   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorContent = []byte{
	// 738 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x7c, 0x54, 0xcd, 0x6e, 0xd3, 0x4a,
	0x14, 0xae, 0xe3, 0x24, 0x4d, 0x4e, 0x1b, 0xdf, 0x74, 0xee, 0xd5, 0x95, 0x89, 0xd4, 0xa8, 0x72,
	0x41, 0xad, 0x40, 0xa4, 0x52, 0x40, 0x42, 0x95, 0x60, 0x91, 0xfe, 0xd0, 0x56, 0x2a, 0xa4, 0x72,
	0x42, 0x2b, 0xd8, 0x58, 0x4e, 0x32, 0x71, 0xac, 0x3a, 0x99, 0x60, 0x8f, 0x1b, 0xb2, 0xe3, 0x11,
	0x78, 0x06, 0x9e, 0xa6, 0x4b, 0x76, 0x48, 0xac, 0xf8, 0x79, 0x11, 0xce, 0xcc, 0x38, 0x6e, 0x53,
	0x5a, 0x16, 0x96, 0xce, 0xf7, 0x9d, 0x9f, 0xf1, 0x7c, 0xdf, 0xb1, 0xa1, 0xd4, 0x65, 0x23, 0x4e,
	0x47, 0xbc, 0x36, 0x0e, 0x19, 0x67, 0x24, 0xe7, 0x8e, 0xfd, 0x71, 0xa7, 0xf2, 0xd8, 0xf3, 0xf9,
	0x20, 0xee, 0xd4, 0xba, 0x6c, 0xb8, 0xe5, 0x31, 0x8f, 0x6d, 0xc9, 0x6c, 0x27, 0xee, 0x4b, 0x24,
	0x81, 0x8c, 0x54, 0x97, 0xf5, 0x35, 0x03, 0x8b, 0xbb, 0x6a, 0x0e, 0x21, 0x90, 0x8d, 0x82, 0xd8,
	0x33, 0xb5, 0x35, 0x6d, 0xb3, 0x68, 0xcb, 0x98, 0xfc, 0x07, 0x39, 0xee, 0xf3, 0x80, 0x9a, 0x19,
	0x49, 0x2a, 0x40, 0x2a, 0x50, 0x08, 0xdc, 0x91, 0x17, 0xbb, 0x1e, 0x35, 0x75, 0x99, 0x48, 0xb1,
	0x98, 0xd2, 0x73, 0x39, 0x35, 0xb3, 0xc8, 0xeb, 0xb6, 0x8c, 0xc5, 0x94, 0x5e, 0xe8, 0xf6, 0xb9,
	0x99, 0x43, 0xb2, 0x60, 0x2b, 0x40, 0x56, 0x01, 0x26, 0xa1, 0xcf, 0xf1, 0x6c, 0xc7, 0xe5, 0x66,
	0x5e, 0xce, 0x29, 0x26, 0x4c, 0x83, 0x93, 0xff, 0x21, 0xef, 0xc6, 0x7c, 0xc0, 0x42, 0x73, 0x51,
	0xa6, 0x12, 0x24, 0x0e, 0xef, 0xe2, 0x50, 0x8f, 0x85, 0x53, 0xb3, 0xa0, 0x0e, 0x9f, 0x61, 0x52,
	0x06, 0x3d, 0x0e, 0x03, 0xb3, 0x28, 0x69, 0x11, 0x8a, 0x29, 0x13, 0xea, 0x7b, 0x03, 0x6e, 0x02,
	0x92, 0x39, 0x3b, 0x41, 0x62, 0xca, 0x39, 0x9d, 0x4e, 0x58, 0xd8, 0x8b, 0xcc, 0xa5, 0x35, 0x5d,
	0x4c, 0x99, 0x61, 0xb2, 0x01, 0xff, 0xcc, 0x26, 0x3a, 0x49, 0xf3, 0xb2, 0x6c, 0x36, 0x66, 0xf4,
	0x59, 0x3a, 0x64, 0xe8, 0x86, 0xe7, 0x3d, 0x36, 0x19, 0x99, 0x25, 0xac, 0x58, 0xb6, 0x53, 0x6c,
	0x7d, 0xcb, 0x02, 0x49, 0x94, 0x3d, 0xf6, 0x23, 0x6e, 0xd3, 0xf7, 0x31, 0x8d, 0x38, 0x79, 0x0e,
	0xf9, 0x88, 0xbb, 0x3c, 0x8e, 0xa4, 0xcc, 0x46, 0xfd, 0x7e, 0x4d, 0xfa, 0x56, 0xfb, 0xb3, 0xb4,
	0x26, 0xe2, 0x96, 0xac, 0xb5, 0x93, 0x1e, 0x21, 0x64, 0xe0, 0x0f, 0x7d, 0x2e, 0xed, 0xc8, 0xd9,
	0x0a, 0xcc, 0x29, 0xa2, 0xdf, 0x50, 0x04, 0xef, 0xcf, 0xfa, 0xfd, 0x88, 0x72, 0x69, 0x08, 0xde,
	0x5f, 0xa1, 0x39, 0x0b, 0x73, 0x37, 0x2c, 0xb4, 0xa0, 0xc4, 0x46, 0xc1, 0xd4, 0x19, 0xf0, 0x61,
	0xe0, 0x08, 0x3d, 0xf3, 0xd2, 0xb6, 0x25, 0x41, 0x1e, 0x22, 0xf7, 0x06, 0x75, 0x7d, 0x8a, 0xcb,
	0xc2, 0x42, 0x2e, 0xbd, 0x31, 0xea, 0x6b, 0x77, 0xdf, 0xa2, 0x85, 0x55, 0x3b, 0x53, 0x5b, 0x56,
	0x93, 0x6d, 0xc8, 0xa1, 0xc2, 0x34, 0x94, 0xc6, 0x19, 0xf5, 0xf5, 0xbf, 0xb7, 0x35, 0x45, 0xa9,
	0xad, 0x3a, 0xc4, 0xb6, 0xe0, 0xca, 0xf6, 0xfd, 0x80, 0x3a, 0x7e, 0x4f, 0x9a, 0x89, 0xdb, 0x92,
	0x30, 0x47, 0x3d, 0xf2, 0x00, 0x8c, 0x6e, 0xe0, 0xe3, 0x10, 0xe7, 0x82, 0x86, 0x91, 0xcf, 0x46,
	0xe8, 0xaa, 0x28, 0x29, 0x29, 0xf6, 0x54, 0x91, 0xa4, 0x0a, 0x90, 0x48, 0xe3, 0xd3, 0x08, 0x5d,
	0x15, 0xc6, 0x5f, 0x63, 0xc8, 0x23, 0x58, 0xa1, 0x1f, 0xba, 0x74, 0xcc, 0x9d, 0x6b, 0x65, 0x25,
	0x59, 0x56, 0x56, 0x89, 0xdd, 0x94, 0xb7, 0xb6, 0x01, 0xae, 0x3c, 0x22, 0x05, 0xc8, 0xee, 0x34,
	0xdb, 0x87, 0xe5, 0x05, 0x62, 0x00, 0x34, 0x5f, 0x1f, 0xbf, 0x75, 0xf6, 0xec, 0xc6, 0xcb, 0x76,
	0x59, 0x23, 0x2b, 0x50, 0x92, 0xb8, 0x71, 0x72, 0x62, 0x37, 0x4f, 0xf7, 0xf7, 0xca, 0x19, 0xab,
	0x0a, 0x79, 0x25, 0x0c, 0x01, 0xc8, 0x9f, 0xed, 0x1f, 0x1d, 0x1c, 0xb6, 0xb1, 0x11, 0x47, 0xb4,
	0x8f, 0x5e, 0xed, 0x97, 0x35, 0x6b, 0x15, 0x8a, 0xa9, 0x02, 0x64, 0x11, 0xf4, 0xbd, 0xd6, 0x2e,
	0xe6, 0x31, 0x68, 0x60, 0xa0, 0x59, 0x7d, 0xf8, 0x77, 0x4e, 0xb3, 0x68, 0xcc, 0x46, 0x11, 0x25,
	0x0f, 0x71, 0x11, 0x14, 0x2d, 0xd6, 0x4b, 0xdf, 0x5c, 0xaa, 0x1b, 0xf3, 0x0a, 0xdb, 0x69, 0x9e,
	0xac, 0x43, 0xc9, 0x8d, 0x70, 0x13, 0x52, 0xbd, 0xd4, 0x4a, 0x2d, 0x4b, 0x32, 0x91, 0xcb, 0xda,
	0x80, 0x95, 0xa4, 0xf3, 0x80, 0xa6, 0x2b, 0x7c, 0xcb, 0x7f, 0xa2, 0xfe, 0x51, 0x03, 0x23, 0xa9,
	0x6c, 0xd1, 0xf0, 0xc2, 0xef, 0x52, 0xf2, 0x02, 0xb2, 0xe2, 0xe5, 0xc8, 0xbd, 0x3b, 0x4d, 0xae,
	0x54, 0x6e, 0x4b, 0x25, 0x77, 0xd9, 0x02, 0x1d, 0xcf, 0x24, 0xe6, 0x7c, 0xc9, 0xd5, 0x6b, 0x54,
	0x6e, 0x5c, 0x6d, 0xe7, 0xd9, 0xe5, 0x8f, 0xea, 0xc2, 0xe5, 0xcf, 0xaa, 0xf6, 0x05, 0x9f, 0xef,
	0xf8, 0x7c, 0xfa, 0x55, 0x5d, 0xc0, 0x2f, 0x99, 0x0d, 0x6b, 0x8c, 0x47, 0xfe, 0x90, 0xd5, 0xbc,
	0x70, 0xdc, 0x3d, 0xd1, 0xde, 0x15, 0x14, 0x1c, 0x77, 0x3e, 0x67, 0xf4, 0x66, 0xbb, 0xd5, 0xc9,
	0xcb, 0x5f, 0xe1, 0x93, 0xdf, 0x01, 0x00, 0x00, 0xff, 0xff, 0x8f, 0x5b, 0x35, 0xe8, 0x51, 0x05,
	0x00, 0x00,
}
