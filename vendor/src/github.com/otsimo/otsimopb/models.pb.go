// Code generated by protoc-gen-gogo.
// source: models.proto
// DO NOT EDIT!

package otsimopb

import proto "github.com/gogo/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

type Gender int32

const (
	Gender_UNKNOWN Gender = 0
	Gender_MALE    Gender = 1
	Gender_FEMALE  Gender = 2
)

var Gender_name = map[int32]string{
	0: "UNKNOWN",
	1: "MALE",
	2: "FEMALE",
}
var Gender_value = map[string]int32{
	"UNKNOWN": 0,
	"MALE":    1,
	"FEMALE":  2,
}

func (x Gender) String() string {
	return proto.EnumName(Gender_name, int32(x))
}
func (Gender) EnumDescriptor() ([]byte, []int) { return fileDescriptorModels, []int{0} }

type ReleaseState int32

const (
	ReleaseState_CREATED     ReleaseState = 0
	ReleaseState_DEVELOPMENT ReleaseState = 1
	ReleaseState_WAITING     ReleaseState = 2
	ReleaseState_REJECTED    ReleaseState = 3
	ReleaseState_VALIDATED   ReleaseState = 4
	ReleaseState_PRODUCTION  ReleaseState = 5
)

var ReleaseState_name = map[int32]string{
	0: "CREATED",
	1: "DEVELOPMENT",
	2: "WAITING",
	3: "REJECTED",
	4: "VALIDATED",
	5: "PRODUCTION",
}
var ReleaseState_value = map[string]int32{
	"CREATED":     0,
	"DEVELOPMENT": 1,
	"WAITING":     2,
	"REJECTED":    3,
	"VALIDATED":   4,
	"PRODUCTION":  5,
}

func (x ReleaseState) String() string {
	return proto.EnumName(ReleaseState_name, int32(x))
}
func (ReleaseState) EnumDescriptor() ([]byte, []int) { return fileDescriptorModels, []int{1} }

type Address struct {
	StreetAddress string `protobuf:"bytes,1,opt,name=street_address,json=streetAddress,proto3" json:"street_address,omitempty" bson:"street_address,omitempty"`
	City          string `protobuf:"bytes,2,opt,name=city,proto3" json:"city,omitempty" bson:"city,omitempty"`
	State         string `protobuf:"bytes,3,opt,name=state,proto3" json:"state,omitempty" bson:"state,omitempty"`
	ZipCode       string `protobuf:"bytes,4,opt,name=zip_code,json=zipCode,proto3" json:"zip_code,omitempty" bson:"zip_code,omitempty"`
	CountryCode   string `protobuf:"bytes,5,opt,name=country_code,json=countryCode,proto3" json:"country_code,omitempty" bson:"country_code,omitempty"`
}

func (m *Address) Reset()                    { *m = Address{} }
func (m *Address) String() string            { return proto.CompactTextString(m) }
func (*Address) ProtoMessage()               {}
func (*Address) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{0} }

type Profile struct {
	Id          string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id,omitempty"`
	Email       string   `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty" bson:"email,omitempty"`
	FirstName   string   `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty" bson:"first_name,omitempty"`
	LastName    string   `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty" bson:"last_name,omitempty"`
	Language    string   `protobuf:"bytes,5,opt,name=language,proto3" json:"language,omitempty" bson:"language,omitempty"`
	MobilePhone string   `protobuf:"bytes,6,opt,name=mobile_phone,json=mobilePhone,proto3" json:"mobile_phone,omitempty" bson:"mobile_phone,omitempty"`
	Address     *Address `protobuf:"bytes,7,opt,name=address" json:"address,omitempty" bson:"address,omitempty"`
	CreatedAt   int64    `protobuf:"varint,8,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" bson:"created_at,omitempty"`
	LastUpdated int64    `protobuf:"varint,9,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty" bson:"last_updated,omitempty"`
}

func (m *Profile) Reset()                    { *m = Profile{} }
func (m *Profile) String() string            { return proto.CompactTextString(m) }
func (*Profile) ProtoMessage()               {}
func (*Profile) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{1} }

type ChildGameEntry struct {
	Id                  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"id"`
	Active              bool   `protobuf:"varint,2,opt,name=active,proto3" json:"active,omitempty" bson:"active"`
	DashboardIndex      int32  `protobuf:"varint,3,opt,name=dashboard_index,json=dashboardIndex,proto3" json:"dashboard_index,omitempty" bson:"dashboard_index"`
	Settings            []byte `protobuf:"bytes,4,opt,name=settings,proto3" json:"settings,omitempty" bson:"settings"`
	AddedAt             int64  `protobuf:"varint,5,opt,name=added_at,json=addedAt,proto3" json:"added_at,omitempty" bson:"added_at"`
	ActivationChangedAt int64  `protobuf:"varint,6,opt,name=activation_changed_at,json=activationChangedAt,proto3" json:"activation_changed_at,omitempty" bson:"activation_changed_at"`
	UpdatedAt           int64  `protobuf:"varint,7,opt,name=updated_at,json=updatedAt,proto3" json:"updated_at,omitempty" bson:"updated_at"`
}

func (m *ChildGameEntry) Reset()                    { *m = ChildGameEntry{} }
func (m *ChildGameEntry) String() string            { return proto.CompactTextString(m) }
func (*ChildGameEntry) ProtoMessage()               {}
func (*ChildGameEntry) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{2} }

type Child struct {
	Id            string            `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id,omitempty"`
	ParentId      string            `protobuf:"bytes,2,opt,name=parent_id,json=parentId,proto3" json:"parent_id,omitempty" bson:"parent_id,omitempty"`
	FirstName     string            `protobuf:"bytes,3,opt,name=first_name,json=firstName,proto3" json:"first_name,omitempty" bson:"first_name,omitempty"`
	LastName      string            `protobuf:"bytes,4,opt,name=last_name,json=lastName,proto3" json:"last_name,omitempty" bson:"last_name,omitempty"`
	BirthDay      int64             `protobuf:"varint,5,opt,name=birth_day,json=birthDay,proto3" json:"birth_day,omitempty" bson:"birth_day,omitempty"`
	Gender        Gender            `protobuf:"varint,7,opt,name=gender,proto3,enum=apipb.Gender" json:"gender,omitempty" bson:"gender,omitempty"`
	Language      string            `protobuf:"bytes,8,opt,name=language,proto3" json:"language,omitempty" bson:"language,omitempty"`
	Games         []*ChildGameEntry `protobuf:"bytes,9,rep,name=games" json:"games,omitempty" bson:"games,omitempty"`
	Active        bool              `protobuf:"varint,10,opt,name=active,proto3" json:"active,omitempty" bson:"active,omitempty"`
	LoggedIn      bool              `protobuf:"varint,11,opt,name=logged_in,json=loggedIn,proto3" json:"logged_in,omitempty" bson:"logged_in,omitempty"`
	SoundsEnabled bool              `protobuf:"varint,12,opt,name=sounds_enabled,json=soundsEnabled,proto3" json:"sounds_enabled,omitempty" bson:"sounds_enabled,omitempty"`
	CreatedAt     int64             `protobuf:"varint,15,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" bson:"created_at,omitempty"`
	LastUpdated   int64             `protobuf:"varint,16,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty" bson:"last_updated,omitempty"`
	ChildInfo     map[string]string `protobuf:"bytes,17,rep,name=child_info,json=childInfo" json:"child_info,omitempty" bson:"child_info,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
}

func (m *Child) Reset()                    { *m = Child{} }
func (m *Child) String() string            { return proto.CompactTextString(m) }
func (*Child) ProtoMessage()               {}
func (*Child) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{3} }

type Author struct {
	Name  string `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty" bson:"name,omitempty"`
	Email string `protobuf:"bytes,2,opt,name=email,proto3" json:"email,omitempty" bson:"email,omitempty"`
}

func (m *Author) Reset()                    { *m = Author{} }
func (m *Author) String() string            { return proto.CompactTextString(m) }
func (*Author) ProtoMessage()               {}
func (*Author) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{4} }

type GameMetadata struct {
	Language string `protobuf:"bytes,1,opt,name=language,proto3" json:"language,omitempty" bson:"language,omitempty"`
	// Visible Name
	VisibleName string `protobuf:"bytes,2,opt,name=visible_name,json=visibleName,proto3" json:"visible_name,omitempty" bson:"visible_name,omitempty"`
	// Summary is summary of game
	Summary string `protobuf:"bytes,3,opt,name=summary,proto3" json:"summary,omitempty" bson:"summary,omitempty"`
	// Description
	Description string `protobuf:"bytes,4,opt,name=description,proto3" json:"description,omitempty" bson:"description,omitempty"`
	// Logo is a rectangle image
	Logo string `protobuf:"bytes,5,opt,name=logo,proto3" json:"logo,omitempty" bson:"logo,omitempty"`
	// Icon is a square image
	Icon string `protobuf:"bytes,6,opt,name=icon,proto3" json:"icon,omitempty" bson:"icon,omitempty"`
	// Keywords
	Keywords []string `protobuf:"bytes,7,rep,name=keywords" json:"keywords,omitempty" bson:"keywords,omitempty"`
	// Images are image files that show on market
	Images []string `protobuf:"bytes,8,rep,name=images" json:"images,omitempty" bson:"images,omitempty"`
	// InfoSlug is the id of the content which describes how to play this game
	InfoSlug string `protobuf:"bytes,9,opt,name=info_slug,json=infoSlug,proto3" json:"info_slug,omitempty" bson:"info_slug,omitempty"`
	// Assets are asset folders or paths for this language
	Assets []string `protobuf:"bytes,10,rep,name=assets" json:"assets,omitempty" bson:"assets,omitempty"`
}

func (m *GameMetadata) Reset()                    { *m = GameMetadata{} }
func (m *GameMetadata) String() string            { return proto.CompactTextString(m) }
func (*GameMetadata) ProtoMessage()               {}
func (*GameMetadata) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{5} }

type GameManifest struct {
	// Unique Name of game
	UniqueName string `protobuf:"bytes,1,opt,name=unique_name,json=uniqueName,proto3" json:"unique_name,omitempty" bson:"unique_name,omitempty" cli:"Unique Name"`
	// Licence
	Licence string `protobuf:"bytes,2,opt,name=licence,proto3" json:"licence,omitempty" bson:"licence,omitempty" cli:"Licence"`
	// Languages
	Languages []string `protobuf:"bytes,3,rep,name=languages" json:"languages,omitempty" bson:"languages,omitempty"`
	// Homepage is the website of game
	Homepage string `protobuf:"bytes,4,opt,name=homepage,proto3" json:"homepage,omitempty" bson:"homepage,omitempty"`
	// Main points to index.html file
	Main string `protobuf:"bytes,5,opt,name=main,proto3" json:"main,omitempty" bson:"main" cli:"Main"`
	// Version is current version for using on manifest file
	Version string `protobuf:"bytes,6,opt,name=version,proto3" json:"version,omitempty" bson:"version" cli:"Version"`
	// Authors is for using at manifest file
	Authors []*Author `protobuf:"bytes,7,rep,name=authors" json:"authors,omitempty" bson:"authors"`
	// Repository
	Repository string `protobuf:"bytes,8,opt,name=repository,proto3" json:"repository,omitempty" bson:"repository"`
	// Metadata information for each languages
	Metadata []*GameMetadata `protobuf:"bytes,13,rep,name=metadata" json:"metadata,omitempty" bson:"metadata,omitempty"`
	// Exclude directories when building
	Exclude []string `protobuf:"bytes,14,rep,name=exclude" json:"exclude,omitempty" bson:"exclude"`
	// Settings.json path
	Settings string `protobuf:"bytes,15,opt,name=settings,proto3" json:"settings,omitempty" bson:"settings,omitempty"`
	// KV directory path
	KvPath string `protobuf:"bytes,16,opt,name=kv_path,json=kvPath,proto3" json:"kv_path,omitempty" bson:"kv_path,omitempty"`
	// DeveloperName is the visible developer name
	DeveloperName string `protobuf:"bytes,17,opt,name=developer_name,json=developerName,proto3" json:"developer_name,omitempty" bson:"developer_name,omitempty"`
	// DefaultLanguage
	DefaultLanguage string `protobuf:"bytes,18,opt,name=default_language,json=defaultLanguage,proto3" json:"default_language,omitempty" bson:"default_language,omitempty"`
}

func (m *GameManifest) Reset()                    { *m = GameManifest{} }
func (m *GameManifest) String() string            { return proto.CompactTextString(m) }
func (*GameManifest) ProtoMessage()               {}
func (*GameManifest) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{6} }

type Game struct {
	Id                string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty" bson:"_id,omitempty"`
	UniqueName        string `protobuf:"bytes,2,opt,name=unique_name,json=uniqueName,proto3" json:"unique_name,omitempty" bson:"unique_name,omitempty"`
	OwnerId           string `protobuf:"bytes,3,opt,name=owner_id,json=ownerId,proto3" json:"owner_id,omitempty" bson:"owner_id,omitempty"`
	ProductionVersion string `protobuf:"bytes,4,opt,name=production_version,json=productionVersion,proto3" json:"production_version,omitempty" bson:"production_version,omitempty"`
	IsOnProduction    bool   `protobuf:"varint,5,opt,name=is_on_production,json=isOnProduction,proto3" json:"is_on_production,omitempty" bson:"is_on_production,omitempty"`
	CreatedAt         int64  `protobuf:"varint,6,opt,name=created_at,json=createdAt,proto3" json:"created_at,omitempty" bson:"created_at,omitempty"`
	LastUpdated       int64  `protobuf:"varint,7,opt,name=last_updated,json=lastUpdated,proto3" json:"last_updated,omitempty" bson:"last_updated,omitempty"`
}

func (m *Game) Reset()                    { *m = Game{} }
func (m *Game) String() string            { return proto.CompactTextString(m) }
func (*Game) ProtoMessage()               {}
func (*Game) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{7} }

type GameRelease struct {
	ReleaseId     string        `protobuf:"bytes,1,opt,name=release_id,json=releaseId,proto3" json:"release_id,omitempty" bson:"_id"`
	GameId        string        `protobuf:"bytes,2,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty" bson:"game_id"`
	Version       string        `protobuf:"bytes,3,opt,name=version,proto3" json:"version,omitempty" bson:"version"`
	GameManifest  *GameManifest `protobuf:"bytes,4,opt,name=game_manifest,json=gameManifest" json:"game_manifest,omitempty" bson:"game_manifest,omitempty"`
	ReleasedAt    int64         `protobuf:"varint,5,opt,name=released_at,json=releasedAt,proto3" json:"released_at,omitempty" bson:"released_at"`
	ReleasedBy    string        `protobuf:"bytes,6,opt,name=released_by,json=releasedBy,proto3" json:"released_by,omitempty" bson:"released_by,omitempty"`
	ReleaseState  ReleaseState  `protobuf:"varint,7,opt,name=release_state,json=releaseState,proto3,enum=apipb.ReleaseState" json:"release_state,omitempty" bson:"release_state"`
	ValidatedBy   string        `protobuf:"bytes,8,opt,name=validated_by,json=validatedBy,proto3" json:"validated_by,omitempty" bson:"validated_by,omitempty"`
	ValidatedAt   int64         `protobuf:"varint,9,opt,name=validated_at,json=validatedAt,proto3" json:"validated_at,omitempty" bson:"validated_at"`
	IntVersion    int64         `protobuf:"varint,10,opt,name=int_version,json=intVersion,proto3" json:"int_version,omitempty" bson:"int_version"`
	Storage       string        `protobuf:"bytes,11,opt,name=storage,proto3" json:"storage,omitempty" bson:"-"`
	ArchiveFormat string        `protobuf:"bytes,12,opt,name=archive_format,json=archiveFormat,proto3" json:"archive_format,omitempty" bson:"-"`
}

func (m *GameRelease) Reset()                    { *m = GameRelease{} }
func (m *GameRelease) String() string            { return proto.CompactTextString(m) }
func (*GameRelease) ProtoMessage()               {}
func (*GameRelease) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{8} }

type UploadToken struct {
	Token      string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty" bson:"token,omitempty"`
	ExpiresAt  int64  `protobuf:"varint,2,opt,name=expires_at,json=expiresAt,proto3" json:"expires_at,omitempty" bson:"expires_at,omitempty"`
	UserId     string `protobuf:"bytes,3,opt,name=user_id,json=userId,proto3" json:"user_id,omitempty" bson:"user_id,omitempty"`
	GameId     string `protobuf:"bytes,4,opt,name=game_id,json=gameId,proto3" json:"game_id,omitempty" bson:"game_id,omitempty"`
	NewVersion string `protobuf:"bytes,5,opt,name=new_version,json=newVersion,proto3" json:"new_version,omitempty" bson:"new_version,omitempty"`
	UploadTo   string `protobuf:"bytes,6,opt,name=upload_to,json=uploadTo,proto3" json:"upload_to,omitempty" bson:"upload_to,omitempty"`
}

func (m *UploadToken) Reset()                    { *m = UploadToken{} }
func (m *UploadToken) String() string            { return proto.CompactTextString(m) }
func (*UploadToken) ProtoMessage()               {}
func (*UploadToken) Descriptor() ([]byte, []int) { return fileDescriptorModels, []int{9} }

func init() {
	proto.RegisterType((*Address)(nil), "apipb.Address")
	proto.RegisterType((*Profile)(nil), "apipb.Profile")
	proto.RegisterType((*ChildGameEntry)(nil), "apipb.ChildGameEntry")
	proto.RegisterType((*Child)(nil), "apipb.Child")
	proto.RegisterType((*Author)(nil), "apipb.Author")
	proto.RegisterType((*GameMetadata)(nil), "apipb.GameMetadata")
	proto.RegisterType((*GameManifest)(nil), "apipb.GameManifest")
	proto.RegisterType((*Game)(nil), "apipb.Game")
	proto.RegisterType((*GameRelease)(nil), "apipb.GameRelease")
	proto.RegisterType((*UploadToken)(nil), "apipb.UploadToken")
	proto.RegisterEnum("apipb.Gender", Gender_name, Gender_value)
	proto.RegisterEnum("apipb.ReleaseState", ReleaseState_name, ReleaseState_value)
}
func (m *Address) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Address) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.StreetAddress) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintModels(data, i, uint64(len(m.StreetAddress)))
		i += copy(data[i:], m.StreetAddress)
	}
	if len(m.City) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintModels(data, i, uint64(len(m.City)))
		i += copy(data[i:], m.City)
	}
	if len(m.State) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintModels(data, i, uint64(len(m.State)))
		i += copy(data[i:], m.State)
	}
	if len(m.ZipCode) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintModels(data, i, uint64(len(m.ZipCode)))
		i += copy(data[i:], m.ZipCode)
	}
	if len(m.CountryCode) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintModels(data, i, uint64(len(m.CountryCode)))
		i += copy(data[i:], m.CountryCode)
	}
	return i, nil
}

func (m *Profile) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Profile) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintModels(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	if len(m.Email) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintModels(data, i, uint64(len(m.Email)))
		i += copy(data[i:], m.Email)
	}
	if len(m.FirstName) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintModels(data, i, uint64(len(m.FirstName)))
		i += copy(data[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintModels(data, i, uint64(len(m.LastName)))
		i += copy(data[i:], m.LastName)
	}
	if len(m.Language) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintModels(data, i, uint64(len(m.Language)))
		i += copy(data[i:], m.Language)
	}
	if len(m.MobilePhone) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintModels(data, i, uint64(len(m.MobilePhone)))
		i += copy(data[i:], m.MobilePhone)
	}
	if m.Address != nil {
		data[i] = 0x3a
		i++
		i = encodeVarintModels(data, i, uint64(m.Address.Size()))
		n1, err := m.Address.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n1
	}
	if m.CreatedAt != 0 {
		data[i] = 0x40
		i++
		i = encodeVarintModels(data, i, uint64(m.CreatedAt))
	}
	if m.LastUpdated != 0 {
		data[i] = 0x48
		i++
		i = encodeVarintModels(data, i, uint64(m.LastUpdated))
	}
	return i, nil
}

func (m *ChildGameEntry) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *ChildGameEntry) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintModels(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	if m.Active {
		data[i] = 0x10
		i++
		if m.Active {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.DashboardIndex != 0 {
		data[i] = 0x18
		i++
		i = encodeVarintModels(data, i, uint64(m.DashboardIndex))
	}
	if len(m.Settings) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintModels(data, i, uint64(len(m.Settings)))
		i += copy(data[i:], m.Settings)
	}
	if m.AddedAt != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintModels(data, i, uint64(m.AddedAt))
	}
	if m.ActivationChangedAt != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintModels(data, i, uint64(m.ActivationChangedAt))
	}
	if m.UpdatedAt != 0 {
		data[i] = 0x38
		i++
		i = encodeVarintModels(data, i, uint64(m.UpdatedAt))
	}
	return i, nil
}

func (m *Child) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Child) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintModels(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	if len(m.ParentId) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintModels(data, i, uint64(len(m.ParentId)))
		i += copy(data[i:], m.ParentId)
	}
	if len(m.FirstName) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintModels(data, i, uint64(len(m.FirstName)))
		i += copy(data[i:], m.FirstName)
	}
	if len(m.LastName) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintModels(data, i, uint64(len(m.LastName)))
		i += copy(data[i:], m.LastName)
	}
	if m.BirthDay != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintModels(data, i, uint64(m.BirthDay))
	}
	if m.Gender != 0 {
		data[i] = 0x38
		i++
		i = encodeVarintModels(data, i, uint64(m.Gender))
	}
	if len(m.Language) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintModels(data, i, uint64(len(m.Language)))
		i += copy(data[i:], m.Language)
	}
	if len(m.Games) > 0 {
		for _, msg := range m.Games {
			data[i] = 0x4a
			i++
			i = encodeVarintModels(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if m.Active {
		data[i] = 0x50
		i++
		if m.Active {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.LoggedIn {
		data[i] = 0x58
		i++
		if m.LoggedIn {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.SoundsEnabled {
		data[i] = 0x60
		i++
		if m.SoundsEnabled {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.CreatedAt != 0 {
		data[i] = 0x78
		i++
		i = encodeVarintModels(data, i, uint64(m.CreatedAt))
	}
	if m.LastUpdated != 0 {
		data[i] = 0x80
		i++
		data[i] = 0x1
		i++
		i = encodeVarintModels(data, i, uint64(m.LastUpdated))
	}
	if len(m.ChildInfo) > 0 {
		for k, _ := range m.ChildInfo {
			data[i] = 0x8a
			i++
			data[i] = 0x1
			i++
			v := m.ChildInfo[k]
			mapSize := 1 + len(k) + sovModels(uint64(len(k))) + 1 + len(v) + sovModels(uint64(len(v)))
			i = encodeVarintModels(data, i, uint64(mapSize))
			data[i] = 0xa
			i++
			i = encodeVarintModels(data, i, uint64(len(k)))
			i += copy(data[i:], k)
			data[i] = 0x12
			i++
			i = encodeVarintModels(data, i, uint64(len(v)))
			i += copy(data[i:], v)
		}
	}
	return i, nil
}

func (m *Author) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Author) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Name) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintModels(data, i, uint64(len(m.Name)))
		i += copy(data[i:], m.Name)
	}
	if len(m.Email) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintModels(data, i, uint64(len(m.Email)))
		i += copy(data[i:], m.Email)
	}
	return i, nil
}

func (m *GameMetadata) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GameMetadata) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Language) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintModels(data, i, uint64(len(m.Language)))
		i += copy(data[i:], m.Language)
	}
	if len(m.VisibleName) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintModels(data, i, uint64(len(m.VisibleName)))
		i += copy(data[i:], m.VisibleName)
	}
	if len(m.Summary) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintModels(data, i, uint64(len(m.Summary)))
		i += copy(data[i:], m.Summary)
	}
	if len(m.Description) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintModels(data, i, uint64(len(m.Description)))
		i += copy(data[i:], m.Description)
	}
	if len(m.Logo) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintModels(data, i, uint64(len(m.Logo)))
		i += copy(data[i:], m.Logo)
	}
	if len(m.Icon) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintModels(data, i, uint64(len(m.Icon)))
		i += copy(data[i:], m.Icon)
	}
	if len(m.Keywords) > 0 {
		for _, s := range m.Keywords {
			data[i] = 0x3a
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if len(m.Images) > 0 {
		for _, s := range m.Images {
			data[i] = 0x42
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if len(m.InfoSlug) > 0 {
		data[i] = 0x4a
		i++
		i = encodeVarintModels(data, i, uint64(len(m.InfoSlug)))
		i += copy(data[i:], m.InfoSlug)
	}
	if len(m.Assets) > 0 {
		for _, s := range m.Assets {
			data[i] = 0x52
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	return i, nil
}

func (m *GameManifest) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GameManifest) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.UniqueName) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintModels(data, i, uint64(len(m.UniqueName)))
		i += copy(data[i:], m.UniqueName)
	}
	if len(m.Licence) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintModels(data, i, uint64(len(m.Licence)))
		i += copy(data[i:], m.Licence)
	}
	if len(m.Languages) > 0 {
		for _, s := range m.Languages {
			data[i] = 0x1a
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if len(m.Homepage) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintModels(data, i, uint64(len(m.Homepage)))
		i += copy(data[i:], m.Homepage)
	}
	if len(m.Main) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintModels(data, i, uint64(len(m.Main)))
		i += copy(data[i:], m.Main)
	}
	if len(m.Version) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintModels(data, i, uint64(len(m.Version)))
		i += copy(data[i:], m.Version)
	}
	if len(m.Authors) > 0 {
		for _, msg := range m.Authors {
			data[i] = 0x3a
			i++
			i = encodeVarintModels(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Repository) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintModels(data, i, uint64(len(m.Repository)))
		i += copy(data[i:], m.Repository)
	}
	if len(m.Metadata) > 0 {
		for _, msg := range m.Metadata {
			data[i] = 0x6a
			i++
			i = encodeVarintModels(data, i, uint64(msg.Size()))
			n, err := msg.MarshalTo(data[i:])
			if err != nil {
				return 0, err
			}
			i += n
		}
	}
	if len(m.Exclude) > 0 {
		for _, s := range m.Exclude {
			data[i] = 0x72
			i++
			l = len(s)
			for l >= 1<<7 {
				data[i] = uint8(uint64(l)&0x7f | 0x80)
				l >>= 7
				i++
			}
			data[i] = uint8(l)
			i++
			i += copy(data[i:], s)
		}
	}
	if len(m.Settings) > 0 {
		data[i] = 0x7a
		i++
		i = encodeVarintModels(data, i, uint64(len(m.Settings)))
		i += copy(data[i:], m.Settings)
	}
	if len(m.KvPath) > 0 {
		data[i] = 0x82
		i++
		data[i] = 0x1
		i++
		i = encodeVarintModels(data, i, uint64(len(m.KvPath)))
		i += copy(data[i:], m.KvPath)
	}
	if len(m.DeveloperName) > 0 {
		data[i] = 0x8a
		i++
		data[i] = 0x1
		i++
		i = encodeVarintModels(data, i, uint64(len(m.DeveloperName)))
		i += copy(data[i:], m.DeveloperName)
	}
	if len(m.DefaultLanguage) > 0 {
		data[i] = 0x92
		i++
		data[i] = 0x1
		i++
		i = encodeVarintModels(data, i, uint64(len(m.DefaultLanguage)))
		i += copy(data[i:], m.DefaultLanguage)
	}
	return i, nil
}

func (m *Game) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *Game) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintModels(data, i, uint64(len(m.Id)))
		i += copy(data[i:], m.Id)
	}
	if len(m.UniqueName) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintModels(data, i, uint64(len(m.UniqueName)))
		i += copy(data[i:], m.UniqueName)
	}
	if len(m.OwnerId) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintModels(data, i, uint64(len(m.OwnerId)))
		i += copy(data[i:], m.OwnerId)
	}
	if len(m.ProductionVersion) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintModels(data, i, uint64(len(m.ProductionVersion)))
		i += copy(data[i:], m.ProductionVersion)
	}
	if m.IsOnProduction {
		data[i] = 0x28
		i++
		if m.IsOnProduction {
			data[i] = 1
		} else {
			data[i] = 0
		}
		i++
	}
	if m.CreatedAt != 0 {
		data[i] = 0x30
		i++
		i = encodeVarintModels(data, i, uint64(m.CreatedAt))
	}
	if m.LastUpdated != 0 {
		data[i] = 0x38
		i++
		i = encodeVarintModels(data, i, uint64(m.LastUpdated))
	}
	return i, nil
}

func (m *GameRelease) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *GameRelease) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.ReleaseId) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintModels(data, i, uint64(len(m.ReleaseId)))
		i += copy(data[i:], m.ReleaseId)
	}
	if len(m.GameId) > 0 {
		data[i] = 0x12
		i++
		i = encodeVarintModels(data, i, uint64(len(m.GameId)))
		i += copy(data[i:], m.GameId)
	}
	if len(m.Version) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintModels(data, i, uint64(len(m.Version)))
		i += copy(data[i:], m.Version)
	}
	if m.GameManifest != nil {
		data[i] = 0x22
		i++
		i = encodeVarintModels(data, i, uint64(m.GameManifest.Size()))
		n2, err := m.GameManifest.MarshalTo(data[i:])
		if err != nil {
			return 0, err
		}
		i += n2
	}
	if m.ReleasedAt != 0 {
		data[i] = 0x28
		i++
		i = encodeVarintModels(data, i, uint64(m.ReleasedAt))
	}
	if len(m.ReleasedBy) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintModels(data, i, uint64(len(m.ReleasedBy)))
		i += copy(data[i:], m.ReleasedBy)
	}
	if m.ReleaseState != 0 {
		data[i] = 0x38
		i++
		i = encodeVarintModels(data, i, uint64(m.ReleaseState))
	}
	if len(m.ValidatedBy) > 0 {
		data[i] = 0x42
		i++
		i = encodeVarintModels(data, i, uint64(len(m.ValidatedBy)))
		i += copy(data[i:], m.ValidatedBy)
	}
	if m.ValidatedAt != 0 {
		data[i] = 0x48
		i++
		i = encodeVarintModels(data, i, uint64(m.ValidatedAt))
	}
	if m.IntVersion != 0 {
		data[i] = 0x50
		i++
		i = encodeVarintModels(data, i, uint64(m.IntVersion))
	}
	if len(m.Storage) > 0 {
		data[i] = 0x5a
		i++
		i = encodeVarintModels(data, i, uint64(len(m.Storage)))
		i += copy(data[i:], m.Storage)
	}
	if len(m.ArchiveFormat) > 0 {
		data[i] = 0x62
		i++
		i = encodeVarintModels(data, i, uint64(len(m.ArchiveFormat)))
		i += copy(data[i:], m.ArchiveFormat)
	}
	return i, nil
}

func (m *UploadToken) Marshal() (data []byte, err error) {
	size := m.Size()
	data = make([]byte, size)
	n, err := m.MarshalTo(data)
	if err != nil {
		return nil, err
	}
	return data[:n], nil
}

func (m *UploadToken) MarshalTo(data []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Token) > 0 {
		data[i] = 0xa
		i++
		i = encodeVarintModels(data, i, uint64(len(m.Token)))
		i += copy(data[i:], m.Token)
	}
	if m.ExpiresAt != 0 {
		data[i] = 0x10
		i++
		i = encodeVarintModels(data, i, uint64(m.ExpiresAt))
	}
	if len(m.UserId) > 0 {
		data[i] = 0x1a
		i++
		i = encodeVarintModels(data, i, uint64(len(m.UserId)))
		i += copy(data[i:], m.UserId)
	}
	if len(m.GameId) > 0 {
		data[i] = 0x22
		i++
		i = encodeVarintModels(data, i, uint64(len(m.GameId)))
		i += copy(data[i:], m.GameId)
	}
	if len(m.NewVersion) > 0 {
		data[i] = 0x2a
		i++
		i = encodeVarintModels(data, i, uint64(len(m.NewVersion)))
		i += copy(data[i:], m.NewVersion)
	}
	if len(m.UploadTo) > 0 {
		data[i] = 0x32
		i++
		i = encodeVarintModels(data, i, uint64(len(m.UploadTo)))
		i += copy(data[i:], m.UploadTo)
	}
	return i, nil
}

func encodeFixed64Models(data []byte, offset int, v uint64) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	data[offset+4] = uint8(v >> 32)
	data[offset+5] = uint8(v >> 40)
	data[offset+6] = uint8(v >> 48)
	data[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Models(data []byte, offset int, v uint32) int {
	data[offset] = uint8(v)
	data[offset+1] = uint8(v >> 8)
	data[offset+2] = uint8(v >> 16)
	data[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintModels(data []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		data[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	data[offset] = uint8(v)
	return offset + 1
}
func (m *Address) Size() (n int) {
	var l int
	_ = l
	l = len(m.StreetAddress)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.City)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.State)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.ZipCode)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.CountryCode)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}

func (m *Profile) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Language)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.MobilePhone)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.Address != nil {
		l = m.Address.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	if m.CreatedAt != 0 {
		n += 1 + sovModels(uint64(m.CreatedAt))
	}
	if m.LastUpdated != 0 {
		n += 1 + sovModels(uint64(m.LastUpdated))
	}
	return n
}

func (m *ChildGameEntry) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.Active {
		n += 2
	}
	if m.DashboardIndex != 0 {
		n += 1 + sovModels(uint64(m.DashboardIndex))
	}
	l = len(m.Settings)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.AddedAt != 0 {
		n += 1 + sovModels(uint64(m.AddedAt))
	}
	if m.ActivationChangedAt != 0 {
		n += 1 + sovModels(uint64(m.ActivationChangedAt))
	}
	if m.UpdatedAt != 0 {
		n += 1 + sovModels(uint64(m.UpdatedAt))
	}
	return n
}

func (m *Child) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.ParentId)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.FirstName)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.LastName)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.BirthDay != 0 {
		n += 1 + sovModels(uint64(m.BirthDay))
	}
	if m.Gender != 0 {
		n += 1 + sovModels(uint64(m.Gender))
	}
	l = len(m.Language)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if len(m.Games) > 0 {
		for _, e := range m.Games {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	if m.Active {
		n += 2
	}
	if m.LoggedIn {
		n += 2
	}
	if m.SoundsEnabled {
		n += 2
	}
	if m.CreatedAt != 0 {
		n += 1 + sovModels(uint64(m.CreatedAt))
	}
	if m.LastUpdated != 0 {
		n += 2 + sovModels(uint64(m.LastUpdated))
	}
	if len(m.ChildInfo) > 0 {
		for k, v := range m.ChildInfo {
			_ = k
			_ = v
			mapEntrySize := 1 + len(k) + sovModels(uint64(len(k))) + 1 + len(v) + sovModels(uint64(len(v)))
			n += mapEntrySize + 2 + sovModels(uint64(mapEntrySize))
		}
	}
	return n
}

func (m *Author) Size() (n int) {
	var l int
	_ = l
	l = len(m.Name)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Email)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}

func (m *GameMetadata) Size() (n int) {
	var l int
	_ = l
	l = len(m.Language)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.VisibleName)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Summary)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Description)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Logo)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Icon)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if len(m.Keywords) > 0 {
		for _, s := range m.Keywords {
			l = len(s)
			n += 1 + l + sovModels(uint64(l))
		}
	}
	if len(m.Images) > 0 {
		for _, s := range m.Images {
			l = len(s)
			n += 1 + l + sovModels(uint64(l))
		}
	}
	l = len(m.InfoSlug)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if len(m.Assets) > 0 {
		for _, s := range m.Assets {
			l = len(s)
			n += 1 + l + sovModels(uint64(l))
		}
	}
	return n
}

func (m *GameManifest) Size() (n int) {
	var l int
	_ = l
	l = len(m.UniqueName)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Licence)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if len(m.Languages) > 0 {
		for _, s := range m.Languages {
			l = len(s)
			n += 1 + l + sovModels(uint64(l))
		}
	}
	l = len(m.Homepage)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Main)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if len(m.Authors) > 0 {
		for _, e := range m.Authors {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	l = len(m.Repository)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if len(m.Metadata) > 0 {
		for _, e := range m.Metadata {
			l = e.Size()
			n += 1 + l + sovModels(uint64(l))
		}
	}
	if len(m.Exclude) > 0 {
		for _, s := range m.Exclude {
			l = len(s)
			n += 1 + l + sovModels(uint64(l))
		}
	}
	l = len(m.Settings)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.KvPath)
	if l > 0 {
		n += 2 + l + sovModels(uint64(l))
	}
	l = len(m.DeveloperName)
	if l > 0 {
		n += 2 + l + sovModels(uint64(l))
	}
	l = len(m.DefaultLanguage)
	if l > 0 {
		n += 2 + l + sovModels(uint64(l))
	}
	return n
}

func (m *Game) Size() (n int) {
	var l int
	_ = l
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.UniqueName)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.OwnerId)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.ProductionVersion)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.IsOnProduction {
		n += 2
	}
	if m.CreatedAt != 0 {
		n += 1 + sovModels(uint64(m.CreatedAt))
	}
	if m.LastUpdated != 0 {
		n += 1 + sovModels(uint64(m.LastUpdated))
	}
	return n
}

func (m *GameRelease) Size() (n int) {
	var l int
	_ = l
	l = len(m.ReleaseId)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.GameId)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.Version)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.GameManifest != nil {
		l = m.GameManifest.Size()
		n += 1 + l + sovModels(uint64(l))
	}
	if m.ReleasedAt != 0 {
		n += 1 + sovModels(uint64(m.ReleasedAt))
	}
	l = len(m.ReleasedBy)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.ReleaseState != 0 {
		n += 1 + sovModels(uint64(m.ReleaseState))
	}
	l = len(m.ValidatedBy)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.ValidatedAt != 0 {
		n += 1 + sovModels(uint64(m.ValidatedAt))
	}
	if m.IntVersion != 0 {
		n += 1 + sovModels(uint64(m.IntVersion))
	}
	l = len(m.Storage)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.ArchiveFormat)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}

func (m *UploadToken) Size() (n int) {
	var l int
	_ = l
	l = len(m.Token)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	if m.ExpiresAt != 0 {
		n += 1 + sovModels(uint64(m.ExpiresAt))
	}
	l = len(m.UserId)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.GameId)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.NewVersion)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	l = len(m.UploadTo)
	if l > 0 {
		n += 1 + l + sovModels(uint64(l))
	}
	return n
}

func sovModels(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozModels(x uint64) (n int) {
	return sovModels(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Address) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Address: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Address: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field StreetAddress", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.StreetAddress = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field City", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.City = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field State", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.State = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ZipCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ZipCode = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field CountryCode", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.CountryCode = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Profile) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Profile: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Profile: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field MobilePhone", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.MobilePhone = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Address", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Address == nil {
				m.Address = &Address{}
			}
			if err := m.Address.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CreatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdated", wireType)
			}
			m.LastUpdated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LastUpdated |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ChildGameEntry) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ChildGameEntry: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ChildGameEntry: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field DashboardIndex", wireType)
			}
			m.DashboardIndex = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.DashboardIndex |= (int32(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				byteLen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + byteLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Settings = append(m.Settings[:0], data[iNdEx:postIndex]...)
			if m.Settings == nil {
				m.Settings = []byte{}
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field AddedAt", wireType)
			}
			m.AddedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.AddedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ActivationChangedAt", wireType)
			}
			m.ActivationChangedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ActivationChangedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field UpdatedAt", wireType)
			}
			m.UpdatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.UpdatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Child) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Child: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Child: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ParentId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ParentId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field FirstName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.FirstName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.LastName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BirthDay", wireType)
			}
			m.BirthDay = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.BirthDay |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Gender", wireType)
			}
			m.Gender = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.Gender |= (Gender(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Games", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Games = append(m.Games, &ChildGameEntry{})
			if err := m.Games[len(m.Games)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Active", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Active = bool(v != 0)
		case 11:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LoggedIn", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.LoggedIn = bool(v != 0)
		case 12:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field SoundsEnabled", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.SoundsEnabled = bool(v != 0)
		case 15:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CreatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 16:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdated", wireType)
			}
			m.LastUpdated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LastUpdated |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ChildInfo", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			var keykey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				keykey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapkey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapkey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapkey := int(stringLenmapkey)
			if intStringLenmapkey < 0 {
				return ErrInvalidLengthModels
			}
			postStringIndexmapkey := iNdEx + intStringLenmapkey
			if postStringIndexmapkey > l {
				return io.ErrUnexpectedEOF
			}
			mapkey := string(data[iNdEx:postStringIndexmapkey])
			iNdEx = postStringIndexmapkey
			var valuekey uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				valuekey |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			var stringLenmapvalue uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLenmapvalue |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLenmapvalue := int(stringLenmapvalue)
			if intStringLenmapvalue < 0 {
				return ErrInvalidLengthModels
			}
			postStringIndexmapvalue := iNdEx + intStringLenmapvalue
			if postStringIndexmapvalue > l {
				return io.ErrUnexpectedEOF
			}
			mapvalue := string(data[iNdEx:postStringIndexmapvalue])
			iNdEx = postStringIndexmapvalue
			if m.ChildInfo == nil {
				m.ChildInfo = make(map[string]string)
			}
			m.ChildInfo[mapkey] = mapvalue
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Author) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Author: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Author: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Name", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Name = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Email", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Email = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameMetadata) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameMetadata: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameMetadata: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Language", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Language = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field VisibleName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.VisibleName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Summary", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Summary = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Description", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Description = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Logo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Logo = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Icon", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Icon = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Keywords", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Keywords = append(m.Keywords, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Images", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Images = append(m.Images, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 9:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field InfoSlug", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.InfoSlug = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 10:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Assets", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Assets = append(m.Assets, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameManifest) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameManifest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameManifest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Licence", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Licence = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Languages", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Languages = append(m.Languages, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Homepage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Homepage = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Main", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Main = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Authors", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Authors = append(m.Authors, &Author{})
			if err := m.Authors[len(m.Authors)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Repository", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Repository = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 13:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Metadata", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Metadata = append(m.Metadata, &GameMetadata{})
			if err := m.Metadata[len(m.Metadata)-1].Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 14:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Exclude", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Exclude = append(m.Exclude, string(data[iNdEx:postIndex]))
			iNdEx = postIndex
		case 15:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Settings", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Settings = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 16:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KvPath", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KvPath = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 17:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DeveloperName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DeveloperName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 18:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field DefaultLanguage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.DefaultLanguage = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *Game) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Game: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Game: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UniqueName", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UniqueName = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field OwnerId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.OwnerId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ProductionVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ProductionVersion = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsOnProduction", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				v |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsOnProduction = bool(v != 0)
		case 6:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field CreatedAt", wireType)
			}
			m.CreatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.CreatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LastUpdated", wireType)
			}
			m.LastUpdated = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.LastUpdated |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipModels(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GameRelease) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GameRelease: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GameRelease: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReleaseId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Version", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Version = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameManifest", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				msglen |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + msglen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.GameManifest == nil {
				m.GameManifest = &GameManifest{}
			}
			if err := m.GameManifest.Unmarshal(data[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 5:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleasedAt", wireType)
			}
			m.ReleasedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ReleasedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleasedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ReleasedBy = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 7:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ReleaseState", wireType)
			}
			m.ReleaseState = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ReleaseState |= (ReleaseState(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 8:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatedBy", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ValidatedBy = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 9:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ValidatedAt", wireType)
			}
			m.ValidatedAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ValidatedAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 10:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IntVersion", wireType)
			}
			m.IntVersion = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.IntVersion |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 11:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Storage", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Storage = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 12:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ArchiveFormat", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ArchiveFormat = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *UploadToken) Unmarshal(data []byte) error {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowModels
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: UploadToken: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: UploadToken: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Token", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Token = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field ExpiresAt", wireType)
			}
			m.ExpiresAt = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				m.ExpiresAt |= (int64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UserId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UserId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field GameId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.GameId = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field NewVersion", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.NewVersion = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		case 6:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field UploadTo", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowModels
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthModels
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.UploadTo = string(data[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipModels(data[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthModels
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipModels(data []byte) (n int, err error) {
	l := len(data)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowModels
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := data[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if data[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowModels
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := data[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthModels
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowModels
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := data[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipModels(data[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthModels = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowModels   = fmt.Errorf("proto: integer overflow")
)

var fileDescriptorModels = []byte{
	// 2056 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xc4, 0x58, 0xdd, 0x6e, 0x1b, 0xc7,
	0x15, 0xb6, 0xf8, 0xaf, 0xe1, 0x8f, 0xa4, 0x71, 0x9c, 0x30, 0x76, 0x2c, 0x3b, 0x1b, 0x34, 0x4d,
	0x1d, 0x5b, 0x2e, 0x9c, 0xba, 0x49, 0xd5, 0xa0, 0x00, 0x29, 0xd1, 0x86, 0x52, 0x59, 0x12, 0x68,
	0x49, 0x01, 0xda, 0x02, 0x8b, 0x25, 0x77, 0x44, 0x0e, 0x44, 0xee, 0x6e, 0xf7, 0x87, 0x36, 0xfb,
	0x0c, 0xbd, 0xc8, 0x33, 0xf4, 0x0d, 0x7a, 0xd3, 0x67, 0x08, 0xd0, 0x8b, 0xf6, 0x01, 0xda, 0xa2,
	0x3f, 0xd7, 0xbd, 0xe9, 0x13, 0xf4, 0xcc, 0x99, 0x99, 0xe5, 0xcc, 0xca, 0x37, 0x8a, 0x2f, 0x72,
	0x21, 0x61, 0xf7, 0xfb, 0xce, 0x39, 0x3b, 0x73, 0xe6, 0xfc, 0x0d, 0x49, 0x6b, 0x1e, 0xfa, 0x6c,
	0x96, 0xec, 0x44, 0x71, 0x98, 0x86, 0xb4, 0xea, 0x45, 0x3c, 0x1a, 0xdd, 0x7e, 0x34, 0xe1, 0xe9,
	0x34, 0x1b, 0xed, 0x8c, 0xc3, 0xf9, 0xe3, 0x49, 0x38, 0x09, 0x1f, 0x23, 0x3b, 0xca, 0x2e, 0xf0,
	0x0d, 0x5f, 0xf0, 0x49, 0x6a, 0x39, 0x7f, 0x2a, 0x91, 0x7a, 0xcf, 0xf7, 0x63, 0x96, 0x24, 0xf4,
	0x2b, 0xd2, 0x49, 0xd2, 0x98, 0xb1, 0xd4, 0xf5, 0x24, 0xd2, 0x5d, 0xbb, 0xbf, 0xf6, 0xc9, 0x7a,
	0xff, 0xa3, 0xff, 0xfd, 0xe3, 0xde, 0xbd, 0x51, 0x12, 0x06, 0xbb, 0x8e, 0xcd, 0x3f, 0x0c, 0xe7,
	0x3c, 0x65, 0xf3, 0x28, 0x5d, 0x3a, 0xc3, 0xb6, 0xa4, 0xb4, 0xad, 0x47, 0xa4, 0x32, 0xe6, 0xe9,
	0xb2, 0x5b, 0x42, 0x0b, 0xef, 0x83, 0x85, 0x5b, 0xd2, 0x82, 0x40, 0x4d, 0x3d, 0x14, 0xa3, 0x3f,
	0x26, 0xd5, 0x24, 0xf5, 0x52, 0xd6, 0x2d, 0xa3, 0xfc, 0x6d, 0x90, 0x7f, 0x57, 0x7f, 0x11, 0x60,
	0x53, 0x41, 0x0a, 0xd2, 0x2f, 0x48, 0xe3, 0x77, 0x3c, 0x72, 0xc7, 0xe0, 0x82, 0x6e, 0x05, 0x95,
	0xee, 0x82, 0xd2, 0xfb, 0x52, 0x49, 0x33, 0xa6, 0x5e, 0x1d, 0xc0, 0x3d, 0xc0, 0xe8, 0x3e, 0x69,
	0x8d, 0xc3, 0x2c, 0x48, 0xe3, 0xa5, 0xd4, 0xae, 0xa2, 0xf6, 0x87, 0xa0, 0x7d, 0x57, 0x2d, 0xd1,
	0x60, 0x4d, 0x0b, 0x4d, 0x45, 0x08, 0x2b, 0xce, 0x1f, 0x2b, 0xa4, 0x7e, 0x12, 0x87, 0x17, 0x7c,
	0xc6, 0xe8, 0x27, 0xa4, 0xc4, 0x7d, 0xe5, 0xac, 0x2e, 0xd8, 0x79, 0x47, 0xda, 0x71, 0xb9, 0x6f,
	0xaa, 0x83, 0x8c, 0xd8, 0x27, 0x9b, 0x7b, 0x7c, 0xa6, 0xfc, 0x62, 0xec, 0x13, 0x61, 0x6b, 0x9f,
	0x88, 0xd0, 0x5f, 0x10, 0x72, 0xc1, 0xe3, 0x24, 0x75, 0x03, 0x6f, 0xae, 0xdd, 0x73, 0x0f, 0xd4,
	0xee, 0x48, 0xb5, 0x15, 0x67, 0xea, 0xae, 0x23, 0x7c, 0x04, 0x28, 0xfd, 0x39, 0x59, 0x9f, 0x79,
	0x5a, 0x5d, 0x3a, 0x6a, 0x1b, 0xd4, 0x6f, 0x4b, 0xf5, 0x9c, 0x32, 0xb5, 0x1b, 0x02, 0x45, 0xe5,
	0x9f, 0x11, 0x78, 0x0e, 0x26, 0x99, 0x37, 0xd1, 0x6e, 0x32, 0x9c, 0xac, 0x99, 0x82, 0xaa, 0x04,
	0x85, 0x97, 0xe7, 0xe1, 0x08, 0xbc, 0xe3, 0x46, 0xd3, 0x30, 0x60, 0xdd, 0x5a, 0xd1, 0xcb, 0x26,
	0x6b, 0x79, 0x59, 0x12, 0x27, 0x02, 0xa7, 0xcf, 0x48, 0x5d, 0xc7, 0x62, 0x1d, 0x0c, 0x34, 0x9f,
	0x74, 0x76, 0x30, 0xcc, 0x77, 0x54, 0x9c, 0xf5, 0x3f, 0x00, 0x83, 0x5d, 0x69, 0xf0, 0x0d, 0x41,
	0xa9, 0x95, 0x85, 0x17, 0xc7, 0x31, 0x83, 0xb8, 0xf1, 0x5d, 0x2f, 0xed, 0x36, 0xc0, 0x54, 0xd9,
	0xf4, 0xe2, 0x8a, 0xb3, 0xbc, 0xa8, 0xe0, 0x5e, 0x2a, 0x76, 0x83, 0xae, 0xca, 0x22, 0x5f, 0x20,
	0xdd, 0x75, 0xb4, 0x60, 0xec, 0xc6, 0x64, 0xad, 0xdd, 0x08, 0xe2, 0x4c, 0xe2, 0xce, 0xef, 0xcb,
	0xa4, 0xb3, 0x37, 0xe5, 0x33, 0xff, 0x39, 0x38, 0x77, 0x20, 0x42, 0x89, 0xde, 0x35, 0x42, 0xa7,
	0x0d, 0xe6, 0xd6, 0xa5, 0x39, 0xee, 0xcb, 0x78, 0xf9, 0x11, 0xa9, 0x79, 0xe3, 0x94, 0x2f, 0x18,
	0x06, 0x4c, 0xa3, 0xbf, 0x05, 0x22, 0x6d, 0xb5, 0x5d, 0xc4, 0x9d, 0xa1, 0x12, 0xa0, 0x7b, 0x64,
	0xc3, 0xf7, 0x92, 0xe9, 0x28, 0xf4, 0x62, 0xdf, 0xe5, 0x81, 0xcf, 0x5e, 0x63, 0xb4, 0x54, 0xcd,
	0x20, 0x2b, 0x08, 0x38, 0xc3, 0x4e, 0x8e, 0x1c, 0x08, 0x80, 0x3e, 0x26, 0x8d, 0x84, 0xa5, 0x29,
	0x0f, 0x26, 0x09, 0x06, 0x4b, 0xab, 0x7f, 0x13, 0xb4, 0x37, 0x54, 0x2a, 0x2a, 0x06, 0x8e, 0x59,
	0x3f, 0xd2, 0x1d, 0xd2, 0x00, 0x1f, 0x4b, 0xb7, 0x56, 0xd1, 0x29, 0x86, 0x82, 0x66, 0xe4, 0x41,
	0xa0, 0x23, 0x4f, 0xc9, 0x2d, 0x5c, 0xaf, 0x97, 0xf2, 0x30, 0x70, 0xc7, 0x53, 0x08, 0x17, 0xa9,
	0x5c, 0x43, 0xe5, 0xfb, 0xa0, 0xfc, 0x81, 0xb1, 0xbf, 0xa2, 0x98, 0x33, 0xbc, 0xb9, 0xc2, 0xf7,
	0x24, 0x0c, 0x56, 0x7f, 0x42, 0x88, 0xf2, 0xbd, 0x30, 0x55, 0x47, 0x53, 0xb7, 0xc0, 0xd4, 0x96,
	0x34, 0xb5, 0xe2, 0xe0, 0x50, 0xd5, 0x4b, 0x2f, 0x75, 0xfe, 0x52, 0x27, 0x55, 0x3c, 0x8e, 0x6b,
	0x24, 0x30, 0xa4, 0x53, 0xe4, 0xc5, 0x2c, 0x48, 0x81, 0x53, 0x49, 0x6c, 0xa4, 0x53, 0x4e, 0x59,
	0x39, 0x21, 0xd1, 0x03, 0xff, 0xfb, 0xcd, 0x65, 0x50, 0x1e, 0xf1, 0x38, 0x9d, 0xba, 0xbe, 0xb7,
	0x54, 0x47, 0x65, 0x28, 0xe7, 0x94, 0xa5, 0x8c, 0xe8, 0xbe, 0xb7, 0xa4, 0x7d, 0x52, 0x9b, 0x30,
	0x88, 0x90, 0x18, 0x9d, 0xdb, 0x79, 0xd2, 0x56, 0x69, 0xf8, 0x1c, 0xc1, 0xfe, 0x1d, 0x30, 0xf4,
	0x9e, 0x34, 0x24, 0xc5, 0x4c, 0x2b, 0x4a, 0xd3, 0x2a, 0x26, 0x8d, 0xeb, 0x15, 0x93, 0xe7, 0xa4,
	0x3a, 0x81, 0x3d, 0x24, 0x90, 0x77, 0x65, 0x28, 0x02, 0xb7, 0xd4, 0xd7, 0xed, 0x5c, 0x32, 0x03,
	0x1d, 0xa5, 0xad, 0x6a, 0x8a, 0x08, 0xfd, 0x2c, 0xcf, 0x27, 0x82, 0xf9, 0x64, 0x2c, 0x5c, 0xe2,
	0xd6, 0xc2, 0x55, 0x66, 0x09, 0xb7, 0x87, 0x13, 0x11, 0x80, 0x3c, 0xe8, 0x36, 0x51, 0xcf, 0x74,
	0xbb, 0xa6, 0xec, 0xa5, 0x23, 0x7a, 0x10, 0x60, 0x53, 0x85, 0xb6, 0xe1, 0x27, 0x2e, 0x0b, 0xbc,
	0xd1, 0x0c, 0x6a, 0x47, 0x0b, 0x2d, 0x98, 0x4d, 0xd5, 0xe2, 0xed, 0xa6, 0x8a, 0xd4, 0x40, 0x32,
	0x85, 0x2a, 0xb6, 0xf1, 0xd6, 0x55, 0x6c, 0xf3, 0xbb, 0x54, 0x31, 0xfa, 0x6b, 0x58, 0x85, 0x70,
	0x3c, 0x6c, 0xf9, 0x22, 0xec, 0x6e, 0xe1, 0x89, 0xdc, 0x31, 0x4f, 0x44, 0xfe, 0x3f, 0x00, 0x56,
	0x9e, 0x8b, 0xb9, 0xc4, 0x5c, 0xd1, 0x5e, 0xa2, 0x56, 0xb8, 0xfd, 0xa5, 0xaa, 0x90, 0xb9, 0x36,
	0xdd, 0x24, 0xe5, 0x4b, 0xb6, 0x94, 0xc9, 0x39, 0x14, 0x8f, 0xf4, 0x1d, 0x52, 0x5d, 0x78, 0xb3,
	0x4c, 0xd6, 0xc4, 0xf5, 0xa1, 0x7c, 0xd9, 0x2d, 0x7d, 0xb1, 0xe6, 0x70, 0x52, 0xeb, 0x65, 0xe9,
	0x34, 0x8c, 0xc5, 0xfc, 0x81, 0x59, 0xb2, 0x56, 0x9c, 0x3f, 0x8a, 0x09, 0x82, 0x62, 0xd7, 0xef,
	0xcb, 0xce, 0x9f, 0x2b, 0xa4, 0x25, 0x42, 0xef, 0x05, 0x4b, 0x3d, 0xf0, 0x8b, 0x67, 0x85, 0xf7,
	0xda, 0xb5, 0x7b, 0xe5, 0x82, 0x27, 0x1c, 0xce, 0x58, 0xa6, 0x76, 0xa9, 0xd8, 0x2b, 0x4d, 0xd6,
	0x3a, 0x17, 0x45, 0x60, 0x82, 0xff, 0x94, 0xd4, 0x93, 0x6c, 0x3e, 0xf7, 0xe2, 0xa5, 0x2a, 0x2d,
	0x46, 0x6f, 0x54, 0x84, 0xd5, 0x1b, 0x15, 0x06, 0xb9, 0xdd, 0xf4, 0x59, 0x32, 0x8e, 0x79, 0x24,
	0x8a, 0xaa, 0xaa, 0x2b, 0x46, 0x21, 0x36, 0x48, 0xeb, 0xdb, 0x06, 0x2e, 0xdc, 0x0d, 0x11, 0x1f,
	0xaa, 0x21, 0xc1, 0x70, 0xb7, 0x40, 0x2d, 0x77, 0x0b, 0x40, 0x88, 0xf3, 0x31, 0x7c, 0xab, 0x56,
	0x14, 0x17, 0xa8, 0x25, 0x2e, 0x00, 0xe1, 0x5a, 0x38, 0xf7, 0x57, 0x61, 0xec, 0x8b, 0x31, 0xa0,
	0x6c, 0xbb, 0x56, 0x33, 0x96, 0x6b, 0x35, 0x28, 0x12, 0x9e, 0xcf, 0xc1, 0xc7, 0x09, 0x94, 0x1c,
	0xa1, 0x68, 0x24, 0xbc, 0xc4, 0xad, 0x84, 0x97, 0x90, 0x48, 0x78, 0x11, 0xa2, 0x6e, 0x32, 0xcb,
	0x26, 0xd8, 0xea, 0xad, 0x3a, 0x9b, 0x53, 0xd6, 0x17, 0x05, 0xfa, 0x12, 0x40, 0x2c, 0x31, 0x09,
	0xf4, 0xc7, 0x04, 0x4a, 0x4c, 0xe1, 0x8b, 0x12, 0xb7, 0x4b, 0x0c, 0x42, 0xce, 0x37, 0x75, 0x15,
	0x4d, 0x5e, 0xc0, 0x2f, 0x58, 0x92, 0xd2, 0x97, 0xa4, 0x99, 0x05, 0xfc, 0xb7, 0x99, 0x8a, 0x08,
	0x19, 0x50, 0x4f, 0xc0, 0xd4, 0x8e, 0x6a, 0x69, 0x2b, 0xd2, 0xb0, 0x77, 0x7f, 0x3c, 0xe3, 0xbb,
	0xce, 0x19, 0x72, 0xf7, 0x45, 0x50, 0x38, 0x43, 0x22, 0x25, 0x31, 0x42, 0xf6, 0x49, 0x7d, 0xc6,
	0xc7, 0x2c, 0x18, 0xeb, 0x10, 0x7b, 0x00, 0x06, 0x3f, 0x56, 0x07, 0x25, 0x89, 0x2b, 0xc6, 0x0e,
	0x25, 0x0e, 0xf1, 0xa2, 0x24, 0xe8, 0x97, 0xa2, 0x0b, 0xc9, 0xc8, 0x4d, 0x20, 0xd2, 0xca, 0xc5,
	0x2e, 0xa4, 0x28, 0x2b, 0xc1, 0x73, 0x54, 0x9c, 0xe5, 0x34, 0x9c, 0xb3, 0x48, 0xa4, 0xc9, 0x95,
	0xb9, 0x5d, 0x33, 0x96, 0x67, 0x35, 0x08, 0xb3, 0x46, 0x05, 0x52, 0x2f, 0x50, 0x41, 0x66, 0xe4,
	0xa8, 0x40, 0xd5, 0x72, 0x5f, 0x88, 0xc7, 0x21, 0xca, 0xd1, 0x5d, 0x52, 0x5f, 0xb0, 0x38, 0xe1,
	0x79, 0xa0, 0x19, 0x41, 0xad, 0x08, 0xa5, 0x75, 0xae, 0xde, 0x86, 0x5a, 0x01, 0x42, 0xa0, 0xee,
	0x61, 0x25, 0x91, 0x11, 0xd7, 0xcc, 0x3b, 0x9e, 0xac, 0x2f, 0x7d, 0x0a, 0xa6, 0x3a, 0xea, 0x54,
	0xa5, 0x9c, 0x18, 0x72, 0xe4, 0x13, 0x7d, 0x4a, 0x48, 0xcc, 0xa2, 0x30, 0xe1, 0x69, 0x08, 0xc9,
	0x28, 0x7b, 0x9d, 0x31, 0x8e, 0xac, 0x38, 0x38, 0x9e, 0xd5, 0x0b, 0x3d, 0x22, 0x8d, 0xb9, 0xaa,
	0x26, 0xdd, 0x36, 0x7e, 0xf4, 0xa6, 0x6e, 0xb3, 0x46, 0xa1, 0x31, 0xfd, 0xa5, 0xc5, 0x2d, 0x7f,
	0x69, 0x90, 0x3e, 0x24, 0x75, 0xf6, 0x7a, 0x3c, 0xcb, 0xe0, 0x8e, 0xd3, 0xc1, 0x63, 0x32, 0x16,
	0xad, 0x08, 0x58, 0xb4, 0x7a, 0x12, 0x07, 0x93, 0x8f, 0x7e, 0x1b, 0xc5, 0x83, 0xd1, 0x8c, 0xf5,
	0xa1, 0x7c, 0x08, 0x7c, 0x4a, 0xea, 0x97, 0x0b, 0x37, 0xf2, 0xd2, 0x29, 0xb6, 0x14, 0xab, 0xf2,
	0x28, 0xc2, 0x0a, 0xfa, 0xcb, 0xc5, 0x09, 0x40, 0xa2, 0x35, 0xfa, 0x6c, 0xc1, 0x66, 0x61, 0xc4,
	0x62, 0x19, 0xe6, 0x5b, 0xc5, 0xfb, 0xa6, 0xcd, 0x5b, 0xad, 0x31, 0xa7, 0x30, 0xb4, 0x4f, 0xc8,
	0xa6, 0xcf, 0x2e, 0xbc, 0x6c, 0x96, 0xba, 0x79, 0x15, 0xa6, 0x68, 0xed, 0x07, 0x60, 0xed, 0x43,
	0x6d, 0xcd, 0x96, 0x30, 0xed, 0x6d, 0x28, 0xf2, 0x50, 0x71, 0xce, 0xdf, 0xca, 0xa4, 0x22, 0xfc,
	0x7e, 0x8d, 0xe1, 0xb0, 0x67, 0x27, 0x6d, 0xa9, 0x18, 0x74, 0x6f, 0x4e, 0x5a, 0x2b, 0x45, 0xe1,
	0x5a, 0x1b, 0xbe, 0x0a, 0x60, 0xbf, 0xf0, 0xc9, 0x72, 0xf1, 0x14, 0x34, 0x63, 0x95, 0x71, 0x04,
	0x61, 0xb8, 0x3c, 0x27, 0x14, 0xae, 0xf4, 0x7e, 0x36, 0xc6, 0x91, 0x59, 0x07, 0xbe, 0x4c, 0xb1,
	0x1f, 0x82, 0x8d, 0x8f, 0xd4, 0x88, 0x7a, 0x45, 0xc6, 0xb4, 0xb6, 0xb5, 0xa2, 0x55, 0x4e, 0xd0,
	0x63, 0xb2, 0xc9, 0x13, 0x17, 0xc4, 0x57, 0x14, 0x66, 0x60, 0xc3, 0xf4, 0x6c, 0x51, 0xc2, 0xb4,
	0xd9, 0xe1, 0xc9, 0x71, 0x70, 0x92, 0x53, 0x85, 0x29, 0xa6, 0xf6, 0xd6, 0x53, 0x4c, 0xfd, 0x3b,
	0xdd, 0xc5, 0xfe, 0x5e, 0x25, 0x4d, 0x71, 0xbc, 0x43, 0x36, 0x63, 0x5e, 0xc2, 0xa0, 0x25, 0x41,
	0x2a, 0xe2, 0xa3, 0x9b, 0x9f, 0x76, 0x07, 0x6c, 0x92, 0xfc, 0xb4, 0x61, 0x11, 0x4a, 0x02, 0xbc,
	0xfd, 0x29, 0xa9, 0x8b, 0x89, 0x72, 0x75, 0x0b, 0x30, 0x72, 0x4b, 0x11, 0x62, 0xf2, 0x85, 0x27,
	0x10, 0x7e, 0xb8, 0x2a, 0x44, 0xe5, 0xa2, 0xf0, 0xe2, 0x4a, 0xe9, 0xf9, 0x0d, 0x69, 0xa3, 0x85,
	0xb9, 0xea, 0x05, 0x78, 0x86, 0x85, 0x5a, 0xa0, 0xa8, 0xbe, 0x03, 0x86, 0xb6, 0x8d, 0xaf, 0x6a,
	0x1d, 0x73, 0xdb, 0xad, 0x89, 0xd9, 0x58, 0x3e, 0x27, 0x4d, 0xb5, 0x0b, 0xe3, 0xce, 0xf6, 0x2e,
	0x98, 0xa1, 0xba, 0x38, 0xe5, 0x24, 0x56, 0x27, 0xf9, 0x06, 0x6e, 0xef, 0x19, 0x8a, 0xa3, 0xe5,
	0xd5, 0x8a, 0x6a, 0x90, 0x56, 0x70, 0x6b, 0xbc, 0xbf, 0xa4, 0x43, 0xd2, 0xd6, 0x3e, 0x96, 0xbf,
	0xf6, 0xc8, 0xcb, 0x84, 0xde, 0x99, 0x3a, 0x8a, 0x97, 0x82, 0x32, 0x33, 0xcd, 0xd2, 0x81, 0xfd,
	0xc4, 0x86, 0x1c, 0xce, 0x4e, 0xde, 0x8c, 0xcb, 0x0b, 0xde, 0x48, 0x57, 0x5b, 0x73, 0x76, 0x32,
	0x58, 0x7b, 0x76, 0xd2, 0x04, 0xac, 0x6c, 0xd7, 0xb4, 0x02, 0x6e, 0x91, 0xf7, 0xfb, 0xf7, 0xc0,
	0xca, 0xcd, 0xa2, 0x15, 0xe1, 0x97, 0x95, 0x6e, 0x0f, 0x3d, 0xca, 0xe1, 0xd2, 0xa7, 0x4f, 0x98,
	0x14, 0x3d, 0x6a, 0x90, 0xe0, 0x0e, 0x78, 0xd3, 0x99, 0xf5, 0x31, 0x0c, 0x6c, 0x50, 0xf8, 0x45,
	0xa9, 0x6a, 0xe2, 0xaa, 0x5b, 0xa0, 0xd4, 0x90, 0x4a, 0x8f, 0xc4, 0x80, 0x26, 0x49, 0x98, 0x28,
	0x3a, 0x5e, 0x0c, 0x23, 0xf2, 0x82, 0xb9, 0x17, 0x61, 0x3c, 0x87, 0xe5, 0xb5, 0xde, 0x20, 0xde,
	0x56, 0x32, 0xcf, 0x50, 0xc4, 0xf9, 0x6f, 0x89, 0x34, 0xcf, 0xa2, 0x59, 0xe8, 0xf9, 0xa7, 0xe1,
	0x25, 0x0b, 0xc4, 0x84, 0x9b, 0x8a, 0x07, 0x15, 0xda, 0x46, 0xf7, 0x44, 0xd8, 0x9a, 0x70, 0x11,
	0x11, 0x79, 0xca, 0x5e, 0x47, 0x3c, 0x66, 0x89, 0xf0, 0x48, 0xa9, 0x98, 0xa7, 0x2b, 0xce, 0xca,
	0x53, 0x05, 0x83, 0x5f, 0xa0, 0x2b, 0x64, 0x89, 0x59, 0xc9, 0x8c, 0xae, 0xa0, 0x08, 0xab, 0x2b,
	0x08, 0x0c, 0x92, 0xe5, 0xe9, 0x2a, 0xb3, 0x2a, 0x45, 0x35, 0x45, 0xd8, 0xb7, 0x4b, 0x99, 0x63,
	0x10, 0x9e, 0x01, 0x7b, 0x95, 0x9f, 0x42, 0xb5, 0x18, 0x9e, 0x06, 0x69, 0x85, 0x27, 0xe0, 0xe7,
	0x79, 0xcf, 0x5f, 0xcf, 0xd0, 0x63, 0x6e, 0x1a, 0xaa, 0xf8, 0x36, 0x06, 0x9b, 0x9c, 0xb2, 0x7a,
	0x60, 0xa6, 0x5c, 0xfc, 0xe0, 0x53, 0x52, 0x93, 0x97, 0x61, 0xda, 0x24, 0xf5, 0xb3, 0xa3, 0x5f,
	0x1e, 0x1d, 0x7f, 0x7d, 0xb4, 0x79, 0x83, 0x36, 0x48, 0xe5, 0x45, 0xef, 0x70, 0xb0, 0xb9, 0x46,
	0x09, 0xa9, 0x3d, 0x1b, 0xe0, 0x73, 0xe9, 0xc1, 0x05, 0x69, 0x99, 0xc1, 0x2e, 0x54, 0xf6, 0x86,
	0x83, 0xde, 0xe9, 0x60, 0x1f, 0x54, 0x36, 0x48, 0x73, 0x7f, 0x70, 0x3e, 0x38, 0x3c, 0x3e, 0x79,
	0x31, 0x38, 0x3a, 0x05, 0x4d, 0x60, 0xbf, 0xee, 0x1d, 0x9c, 0x1e, 0x1c, 0x3d, 0xdf, 0x2c, 0xd1,
	0x16, 0x69, 0x0c, 0x07, 0x5f, 0x0d, 0xf6, 0x84, 0x6c, 0x99, 0xb6, 0xc9, 0xfa, 0x79, 0xef, 0xf0,
	0x60, 0x1f, 0x55, 0x2b, 0xb4, 0x43, 0xc8, 0xc9, 0xf0, 0x78, 0xff, 0x6c, 0xef, 0xf4, 0xe0, 0xf8,
	0x68, 0xb3, 0xda, 0xff, 0xfc, 0xdb, 0x7f, 0x6d, 0xdf, 0xf8, 0xf6, 0xdf, 0xdb, 0x6b, 0x7f, 0x85,
	0xbf, 0x7f, 0xc2, 0xdf, 0x37, 0xff, 0xd9, 0xbe, 0x41, 0x36, 0xc6, 0xe1, 0x7c, 0x27, 0x4c, 0x13,
	0x3e, 0x0f, 0x77, 0x26, 0x71, 0x34, 0x3e, 0x59, 0xfb, 0x55, 0x43, 0xbe, 0x46, 0xa3, 0x3f, 0x94,
	0xca, 0xc7, 0xa7, 0x2f, 0x47, 0x35, 0xfc, 0x75, 0xf8, 0xb3, 0xff, 0x07, 0x00, 0x00, 0xff, 0xff,
	0xa2, 0x84, 0xf3, 0x6c, 0x63, 0x16, 0x00, 0x00,
}
